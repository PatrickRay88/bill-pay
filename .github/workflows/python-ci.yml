name: Python CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: '1'
      PYTHONUNBUFFERED: '1'
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      PYTHONPATH: ${{ github.workspace }}
    strategy:
      matrix:
        # Supported active Python versions; 3.12 is current stable.
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: requirements.txt
    - name: Show Python and pip versions
      run: |
        python --version
        pip --version
        pwd
        ls -la
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Run tests with coverage
      run: |
        coverage run -m pytest -q --maxfail=1 --junitxml=pytest-report.xml
        coverage xml -o coverage.xml
        coverage report -m
      env:
        FLASK_ENV: testing
        SECRET_KEY: test-secret-key
        PLAID_CLIENT_ID: ${{ secrets.PLAID_CLIENT_ID }}
        PLAID_SECRET: ${{ secrets.PLAID_SANDBOX_SECRET }}
        PLAID_ENV: sandbox
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-report.xml
          coverage.xml

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel
      - name: Build and package application
        run: |
          python -m build
    # Deployment steps would go here - e.g., to Heroku, Fly.io, etc.
    # - name: Deploy to Heroku
    #   uses: akhileshns/heroku-deploy@v3.12.12
    #   with:
    #     heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
    #     heroku_app_name: "billpay-app"
    #     heroku_email: ${{ secrets.HEROKU_EMAIL }}
